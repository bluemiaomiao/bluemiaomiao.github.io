<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>article on Halo的主页</title><link>/categories/article/</link><description>Recent content in article on Halo的主页</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 23 Jan 2023 08:30:00 +0800</lastBuildDate><atom:link href="/categories/article/index.xml" rel="self" type="application/rss+xml"/><item><title>美元是如何收割全世界的？</title><link>/article/how-did-the-us-dollar-harvest-the-world/</link><pubDate>Mon, 23 Jan 2023 08:30:00 +0800</pubDate><guid>/article/how-did-the-us-dollar-harvest-the-world/</guid><description>一张 100 美元（10000美分）的纸币印刷成本是多少？美联储给出的答案是 17 美分，折合人民币 1.15320 元。制造一张 100 美元，只需要一根安全线，一点油墨，一张棉麻纸。这张几乎零成本的纸就可以换回将近 55 杯瑞幸咖啡。这种一本万利、白吃交换就是美元霸权吗？
一张 100 美元的纸币净收益就是 9983 美分，这部分是政府无偿占有的，货币的价值就是信用体系。这部分被无偿占有而且超过铸币成本的钱叫做铸币税，而美元向全世界征收铸币税就要从双挂钩体系聊起。国内流行着一个经典的错误：美元通过双挂钩体系收割全世界，伴随着双挂钩体系的崩溃，美元霸权已经破裂。
要证明这个说法是错误的，那么得去到一夜一万五房费的美国新罕不什尔州布雷顿森林豪华度假山庄华盛顿酒店的豪华总统套房。1945年，四十四个国家的代表在这里制定了布雷顿森林体系：以固定汇率的方式，各国货币和美元挂钩，美元和黄金挂钩。简单的理解，按照现在的汇率，中国发行 678.36 元，必须要美国发行 100 美元，而美国发行 100 美元则必须要有 89 克黄金作为作为储备。在布雷顿森林体系下，100 美元不是可以用 17 美分就可以虚空印刷的纸，而是真真实实的 89 克黄金的兑换券。在这个看似美元主导但是黄金之上的金汇兑体系里边，黄金不仅压制了美元，还进一步限制了美元收割全世界的可能性。
布雷顿森林体系却有一个无法调和的矛盾：战后世界，鼎新革故，百废俱兴，经济恢复增长就需要更多的货币来充当贸易的媒介。而在布雷顿森林体系下，各国货币想要增加就必须增加美元，美国要增加美元，那么必须增加黄金。问题在于：黄金的产量无法满足需求。主要基于三点原因：
人不够用。两次世界大战使得高品质易处理富矿的新开采点变得缓慢，相应的淘金热在大淘金时代的 10 年里出现了至少 20 次。但是整个 19 世纪的 100 年里，淘金热至少出现了 57 次。在 1933 年到 1945 年的整个 12 年间，除了太平洋的斐济、南美洲的秘鲁零星的出现了一点淘金热之外，传统的大型淘金热总共出现了 0 次。 人的脑子不够用。由于技术限制，淘金工艺总共分为两种：一种是沉金工艺，因为金的密度大，缺点是效率太低。第二个方法是氰化法（方程式在下面），缺点在于效率低，光是溶解黄金都很难，铁硫化物氧化反应需要大量的氧气和水，但是氧化出来的中间产物都会消耗氰，在第二步中锌元素的利用率也很低，因为锌会使得水被还原和被氧气氧化两个副反应。到二战之后的 60 年代才出现了新的工艺，比如炭浆法和炭浸法。 产业政策。二战进入白热化，各种军备的需求量巨大，制造炮弹的铜为代表的普通金属缺口巨大，而黄金不仅在战争里用途很少，还占据了大量的旷工。美国战时计划生产委员会在 1942 年夏天命令 4000 多名休假中的士兵去开采铜矿，直接得罪了军队，军队对生产委员会提出了质疑，同时还要求关闭采金业。 1942 年 10 月 06 日，各高层召开会议，正式决定关闭采金业。 根据以上三点原因，我们不难发现布雷顿森林体系的重大问题，要使得黄金的需求量不增加，那么美元的数量就不增加，进一步往下看就是各国货币都不增加，这样就会导致全世界进入通货紧缩，经济衰退，因为流通中的货币不足。但是战后各国需要发展经济，需要更多的流通中的货币，黄金的产量必然是要增加的。
美国政府面临着经济增长和币值稳定的特里芬难题。此时的美元无法同时提供流动性和信心。
布雷顿森林体系是美国数届政客的巨作，无论选择哪一个方向都意味着布雷顿森林体系的破产，左右为难之下，美国一直在做扬汤止沸的操作。 中国的古语：“日月递照，列星随旋；黎明将起，月落参横。”，大白话解释：“你不想体面，客观规律就会帮你体面”。摆脱了炮火连天的战后世界，不以美国意志为转移的选择了经济增长，这就意味着美元一定会贬值，因为黄金进入了存量时代，很难进行再增长。
1960 年到 1973 年爆发了大大小小的 10 次美元危机。在第 6 次和第 7 次危机叠加发生之后，尼克松总统在 1971 年 08 月 15 日宣布美元停止兑换黄金，这意味着布雷顿森林体系即将崩溃。在两年后的第 10 次美元危机期间，各个国家纷纷效仿英国，将美元兑换为黄金然后抛弃美元。</description></item><item><title>一个高性能分布式 CMDB 平台的设计</title><link>/article/a-fast-distributed-cmdb-design/</link><pubDate>Sat, 07 Jan 2023 00:25:20 +0800</pubDate><guid>/article/a-fast-distributed-cmdb-design/</guid><description>任何一个 CMDB 都不值得开源，因为每个公司都不一样。
因为成本问题，公司管理层决定替换掉 ManageEngine 的 ServiceDesk Plus 服务。这是第一次自己设计的运维平台系统允许被通过外部文章的方式发布出来。这篇文章介绍了针对 Web 业务类型的公司如何从零构建一个 CMDB 系统。笔者所在的公司有相当一部分裸金属服务，还有一个阿里云的 ECS 云虚拟机，我们在云虚拟机上部署了 Kubernetes 集群。
由于笔者的公司主要深耕在线教育行业，视频和文章是必须的。我们通过 ffmpeg、h264、h265 程序对原始数据进行压制。通过对象存储实现我们的视频、音频和图片内容的存储。一些评论通过 MongoDB 存储。我们有很多学员在海外，全球网络延时也是很大的阻碍因素。接下来我们将讨论如何避免这样的问题。
架构图 笔者所在公司的研发部门使用 Java 构建业务应用，我们运维部门决定采用 Go 语言和 Vue.js 构建我们的运维系统。话不多说，先上架构图：
先放一句大话：此架构适用于任何规模的公司！
现有集群的复用 分布式配置数据存储：由于笔者所在的公司全部使用 MongoDB，那么我们运维部门也考虑采用 MongoDB，毕竟有先前的经验积累，另外可以复用现有的 MongoDB 集群。 分布式协调：此外我们还复用了现有的分布式协调集群 ———— Zookeeper，不过这个运维平台从代码上兼容了 ZooKeeper 和 ETCD，通过配置文件的驱动字段可以修改。 分布式消息系统：业务部门使用了 Kafka 作为消息中间件，另外我们还使用了 ELK 作为在线日志系统供研发部门查询，所以消息集群仍旧是 Kafka。 运维业务元数据 运维平台从元数据管理和配置管理进行了设计，元数据包括端口、IP地址、服务等。运维同学可以新建一些元数据，然后对这些元数据进行操作。这就很简单了，无非就是对一些 Document 的增删改查，由于笔者之前在某游戏公司工作，这个想法参考了某游戏公司的实现。
笔者是个喜欢创新的人，我们通过元数据实现了业务全景图，这样在可视化场景为运维人员提供业务拓扑、业务树、网络拓扑等组织管理形式，方便运维人员对整个业务系统运行状态和部署架构全局一览，清晰便捷。
前后端分离 笔者和其他的小伙伴使用了 Vue.js、ECharts 和 Naive UI 构建了 CMDB 的前端，通过 json-rpc 向后端发送请求。</description></item><item><title>学习 Google cAdvisor 源码</title><link>/article/google-cadvisor/</link><pubDate>Thu, 08 Sep 2022 11:02:19 +0800</pubDate><guid>/article/google-cadvisor/</guid><description/></item><item><title>深入 Kafka</title><link>/article/deep-in-kafka/</link><pubDate>Sat, 02 Jul 2022 13:43:10 +0800</pubDate><guid>/article/deep-in-kafka/</guid><description>概念 Apache Kafka 是一个开源分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和任务关键型应用程序。Apache Kafka 在制造业、银行、保险、电信等大数据分析与处理方面存在着巨大的用途，官网也说 &amp;ldquo;More than 80% of all Fortune 100 companies trust, and use Kafka.&amp;quot;。
官方网站：https://kafka.apache.org
笔者研发的 zTrader Framework 支持接入各种 MQ 中间件，其中 Kafka 也在支持的列表，用作交易日志、风控通知、实时消息、量化策略日志等。
学习 Kafka 的重要性可见一斑。
Kafka 的构建使用了如下几个概念：
消费者：从 Kafka 中获取数据并进行处理。 消费者组：通过 ID 标识一个组，同组的消费者无法重复消费消息，不同组的可以。 生产者：向 Kafka 中投放数据。 集群：多个 Kafka 服务实例构成的逻辑概念。 节点（Broker）：一个 Kafka 服务实例。 主题（Topic）：一个逻辑概念，通常用于区分业务类型。 分区（Parition）：一个物理概念，一个主题中可以存在多个分区，分区落实到集群中的服务器存储上是目录。 消息：数据。 集群 下面介绍 Kafka 集群具备的特点。
主从模式 Kafka 的高可用依赖于 Apache Zookeeper（官方网站：https://zookeeper.apache.org），因此 Kafka 集群中需要 Zookeeper 集群。由于 Zookeeper 集群使用了 Zab 算法作为高可用方案，那么实际生产环境中建议部署5个 Zookeeper 节点。通常在 Zab 算法中3个节点认为是高可用的，当其中一个节点宕机以后，另外两个节点仍旧可以提供服务，但是如果这两个中任意一个损坏，那么整个集群将不可用，因此推荐部署5个节点。</description></item><item><title>学习 kubeadm 源码</title><link>/article/kubernetes-kubeadm/</link><pubDate>Tue, 15 Feb 2022 19:45:08 +0800</pubDate><guid>/article/kubernetes-kubeadm/</guid><description>背景与问题 Kubeadm是芬兰的一个高中生在2015年的夏季所开发的，它本人也是云原生的爱好者，在CNCF社区处于领导职位。在Kubeadm没有发布之前，Kubernetes社区面临的问题是部署困难，且没有统一的、官方的部署方式。
愿意尝试使用Kubernetes的人必须忍受繁琐的步骤并且需要弄清楚整个Kubernetes的架构细节，例如拷贝二进制、分发证书、设置命令行启动参数等。随后Kubernetes社区提供了一个安装脚本，叫做kube-up，但是依旧是用于测试的，很快开源社区便出现了使用Chef、Puppet、Ansible等自动化部署工具构建的部署方式。但是这些部署方式都不是完美的并且也不是官方所推荐的。
社区开始在外界寻找灵感，Docker Swarm的出现刺激了社区的开发人员，Kubeadm就这样诞生了。Kubernetes整个软件的设计是采用模块化的，高内聚低耦合，支持各种灵活的部署方式，确定Kubeadm的设计目标后，由Kubernetes SIG负责设计的Kubeadm开始并入Kubernetes源代码作为官方所推荐的生产环境下的部署工具。
使用Kubeadm并不需要深入了解Kubernetes的各种细节，但是通过本文深入探索Kubeadm的设计与实现，你可以还原整个Kubernetes集群部署所做的细节。
搭建源代码分析环境 Kubernetes的源代码由于实现的缘故，目前有些地方仅支持类UNIX系统，我们所需的工具如下：
Goland：JetBrains出品的Goland是主流的付费Golang IDE，具有强大的静态代码分析与推导能力，开源软件作者和教育工作者可以获得免费的许可。如果你不愿意为此付费，Mircosoft Visual Studio Code也是一个比较不错的编辑器，基于Electron开发，但是编辑器终究还是编辑器。 Vim：跨平台的文本编辑器，我们需要在Linux服务器上安装，以方便随时查看代码。 Go 1.17.x：Kubernetes版本与Golang的版本是绑定关系，本文采用Kubernetes 1.22.x版本，因此需要安装Go 1.17.x Open SSH Server：我们Mac/Windows上的Kubernetes源代码编辑完成以后需要通过Goland内置的SFTP上传到Linux服务器。 Git：Kubernetes源代码使用分布式版本控制系统Git来管理。 Ubuntu 21.04：Linux发行版，你可以选择自己喜欢的Linux发行版。 GCC、G++环境：Kubernetes源代码中不仅Go代码，还有C/C++代码和汇编ASM代码，因此你需要为Linux服务器部署C/C++环境。如果你想在本地编译Kubernetes源代码，那么你需要安装Vistual Studio或者XCode。 具体的方式如下图所示：</description></item></channel></rss>